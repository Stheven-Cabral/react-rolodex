{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","assassin","id","name","email","CardList","assassins","map","SearchBox","placeholder","handleChange","type","onChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredAssassins","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAGaA,G,MAAO,SAACC,GAEnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,eACtB,mCAAOL,EAAMI,SAASE,KAAtB,OACA,4BAAKN,EAAMI,SAASG,aCJbC,G,MAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SAEID,EAAMS,UAAUC,KAAI,SAAAN,GAAQ,OAC1B,cAAC,EAAD,CAAwBA,SAAUA,GAAvBA,EAASC,WCPjBM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCqCDG,G,wDAxCb,aAAe,IAAD,8BACZ,gBAeFH,aAAe,SAACI,GAId,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAlBzC,EAAKC,MAAQ,CACXb,UAAW,GACXU,YAAa,IAJH,E,gEASO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,UAAWkB,S,+BAWjC,IAAD,EAC4BC,KAAKN,MAAhCb,EADD,EACCA,UAAWU,EADZ,EACYA,YACbU,EAAoBpB,EAAUqB,QAAO,SAAA1B,GAAQ,OACjDA,EAASE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGnD,OAEE,sBAAK9B,UAAU,MAAf,UACE,2CAAa,4CAAb,gBACA,cAAC,EAAD,CAAWW,YAAY,mBAAmBC,aAAce,KAAKf,eAC7D,cAAC,EAAD,CAAUJ,UAAWoB,W,GAnCXI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0f6eb2d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img alt=\"asassin\" src={`https://robohash.org/${props.assassin.id}?set=set2`}/>\r\n      <h3> { props.assassin.name } </h3>\r\n      <p>{ props.assassin.email }</p>\r\n    </div>\r\n  )\r\n};","import React from 'react';\r\n// named exports like 'Card' require brackets to be imported.\r\nimport { Card } from '../card/card.component.jsx';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {\r\n        props.assassins.map(assassin => \r\n          <Card key={assassin.id} assassin={assassin} />\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n};","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input \r\n      className=\"search\"\r\n      type=\"search\" \r\n      placeholder={placeholder} \r\n      onChange={handleChange} />\r\n  )\r\n}","import React, {Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component.jsx';\nimport { SearchBox } from './components/search-box/search-box.component.jsx';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      assassins: [],\n      searchField: ''\n    }\n    \n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({assassins: users}));\n  }\n\n  // Arrow functions have lexical scoping.\n  handleChange = (event) => {\n    // This throws an arrow as 'this' is undefined. Why is it not referencing the class state.\n    // The reason is JS doesn't set the scope of 'this' on functions. You have explicitely set the context you want this to refer to.\n    // To remedy this, you can store this.handleChange in the class constructor and bind it to 'this' which refers to the class component.\n    this.setState({searchField: event.target.value});\n  }\n\n  render() {\n    const { assassins, searchField } = this.state;\n    const filteredAssassins = assassins.filter(assassin =>\n      assassin.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return (\n      \n      <div className=\"App\">\n        <h1>Galactic <span>Assassin</span> Directory</h1>\n        <SearchBox placeholder=\"search assassins\" handleChange={this.handleChange}/>\n        <CardList assassins={filteredAssassins}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}